{
    "openapi": "3.0.3",
    "info": {
        "description": "Provides functions for administering a computerized adaptive version of the xxx.",
        "title": "Computerized Adaptive Testing",
        "version": "1.0.0"
    },
    "paths": {
        "/estimate_plot.svg": {
            "get": {
                "summary": "Create plot of participants' estimated theta and error range",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "image/svg+xml": {
                                "schema": {
                                    "type": "string",
                                    "description": "SVG image"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "estimate",
                        "in": "query",
                        "description": "Theta (ùúÉ) estimate, as returned by `next_item`",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "se",
                        "in": "query",
                        "description": "Standard error of the estimate, as returned by `next_item`",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "background",
                        "in": "query",
                        "description": "Background colour of the main panel\n\n_named colour, hex rgb colour, or _transparent_._",
                        "schema": {
                            "$ref": "#/components/schemas/Colour",
                            "default": "transparent"
                        },
                        "example": "transparent"
                    },
                    {
                        "name": "fill_colour",
                        "in": "query",
                        "description": "Fill colour of dots.\n\n_named colour, hex rgb colour, or _transparent_._",
                        "schema": {
                            "$ref": "#/components/schemas/Colour",
                            "default": "#ffab06"
                        },
                        "example": "#ffab06"
                    },
                    {
                        "name": "stroke_colour",
                        "in": "query",
                        "description": "Outline (stroke) colour of dots.\n\n_named colour, hex rgb colour, or _transparent_._",
                        "schema": {
                            "$ref": "#/components/schemas/Colour",
                            "default": "#ffffff"
                        },
                        "example": "#ffffff"
                    },
                    {
                        "name": "cutoffs",
                        "in": "query",
                        "description": "Vector of `y` (ùúÉ) coordinates for horizontal guide lines.",
                        "schema": {
                            "type": "array",
                            "items": { "type": "number" },
                            "uniqueItems": true,
                            "minItems": 0,
                            "maxItems": 999,
                            "default": [-1.5, -0.4, 0.54, 1.83]
                        }
                    },
                    {
                        "name": "range",
                        "in": "query",
                        "description": "Vector of minimum and maxium coordinate of `y` (ùúÉ) scale.",
                        "schema": {
                            "type": "array",
                            "items": { "type": "number" },
                            "uniqueItems": true,
                            "minItems": 2,
                            "maxItems": 2,
                            "default": [-3, 3]
                        }
                    },
                    {
                        "name": "points",
                        "in": "query",
                        "description": "Number of points to be drawn.",
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 999,
                            "default": 20
                        }
                    }
                ]
            }
        },
        "/next_item": {
            "post": {
                "summary": "Calculate updated theta estimate and best next item",
                "description": "Calculates theta estimate, standard error and scaled score based on current responses. Returns estimates, most appropriate next item (if applicable), and an indicator for test completeness.\n\n**NOTE**: The example estimate and score are not accurate for the model - they serve as a quick example only. For accurate tests, use the `Try it out` function to get live API results.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "next_item": {
                                            "type": "integer",
                                            "example": 6
                                        },
                                        "completed": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "estimate": {
                                            "type": "number",
                                            "example": 2.13
                                        },
                                        "score": {
                                            "type": "number",
                                            "example": 1.12
                                        },
                                        "se": {
                                            "type": "number",
                                            "example": 0.451
                                        }
                                    },
                                    "required": [
                                        "completed",
                                        "estimate",
                                        "se",
                                        "score"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "description": "error description"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "prior": {
                                        "$ref": "#/components/schemas/Prior"
                                    },
                                    "administered": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/AdministeredItem"
                                        },
                                        "example": [
                                            {
                                                "item_id": 3,
                                                "response": 2
                                            },
                                            {
                                                "item_id": 8,
                                                "response": 1
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Prior": {
                "type": "number",
                "minimum": 0,
                "maximum": 4,
                "default": 2
            },
            "AdministeredItem": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "integer"
                    }
                },
                "required": ["item_id", "response"],
                "example": {
                    "item_id": 3,
                    "response": 2
                }
            },
            "Colour": {
                "oneOf": [
                    {
                        "type": "string",
                        "example": "transparent",
                        "description": "special value for a transparent (0% opacity) colour."
                    },
                    {
                        "type": "string",
                        "example": "red, steelblue, gray",
                        "description": "named colour. R has a list of rougly 650 defined colors. See the `colors()` function in R, or <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf> for a complete list."
                    },
                    {
                        "type": "string",
                        "example": "#FFFFFF, #000000, #FF0000",
                        "description": "RGB colour in hex format.\n\nSee <https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool> for a colour picker and more information. \n\n<div class='info'>\n\n>NOTE: R does not support opacity in hex colours, e.g. `#ffffff80` (white with ~50% opacity) will be rendered as `#ffffff` (fully opaque white).</div><div class='info'>\n\n>NOTE: Remember that `#` should be URI-encoded to `%23` when manually crafting requests (e.g., `...?background=%23ffffff`).</div>"
                    }
                ]
            }
        }
    }
}
